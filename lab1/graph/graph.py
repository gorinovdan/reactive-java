import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os

def load_data(csv_path=None):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV –∏–ª–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä—É—á–Ω—É—é.
    """
    if csv_path and os.path.exists(csv_path):
        df = pd.read_csv(csv_path)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ '{csv_path}'")
    else:
        print("CSV –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é (–ø—Ä–∏–º–µ—Ä –Ω–∏–∂–µ):")
        print("Dataset Receipts Iterative Stream Custom")
        print("–ü—Ä–∏–º–µ—Ä: Simple 5000 45 62 59")
        print("–í–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

        rows = []
        while True:
            line = input("> ").strip()
            if not line:
                break
            parts = line.split()
            if len(parts) != 5:
                print("–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ 5 –∑–Ω–∞—á–µ–Ω–∏–π.")
                continue
            dataset, receipts, iterative, stream, custom = parts
            rows.append({
                "Dataset": dataset,
                "Receipts": int(receipts),
                "Iterative": float(iterative),
                "Stream": float(stream),
                "Custom": float(custom),
            })
        df = pd.DataFrame(rows)

    return df


def plot_benchmarks_bar(df, save=False):
    """
    –°—Ç—Ä–æ–∏—Ç —Å—Ç–æ–ª–±—á–∞—Ç—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞–±–æ—Ä–∞ (Simple / Complex)
    —Å –ª–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–æ–π —à–∫–∞–ª–æ–π –ø–æ –æ—Å–∏ Y.
    """
    datasets = df["Dataset"].unique()

    for ds in datasets:
        subset = df[df["Dataset"] == ds].sort_values("Receipts")

        x = np.arange(len(subset))
        width = 0.25

        fig, ax = plt.subplots(figsize=(8, 5))
        bars1 = ax.bar(x - width, subset["Iterative"], width, label="Iterative")
        bars2 = ax.bar(x, subset["Stream"], width, label="Stream")
        bars3 = ax.bar(x + width, subset["Custom"], width, label="Custom collector")

        ax.set_xlabel("Receipts count")
        ax.set_ylabel("Time (ms, log scale)")
        ax.set_title(f"Benchmark: {ds} dataset (logarithmic scale, lower is better)")

        ax.set_xticks(x)
        ax.set_xticklabels([f"{int(v):,}".replace(",", " ") for v in subset["Receipts"]])

        ax.set_yscale("log")  # ‚Üê –≤–æ—Ç –∫–ª—é—á–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞!
        ax.legend()
        ax.grid(axis="y", linestyle="--", alpha=0.6, which="both")

        plt.tight_layout()

        if save:
            filename = f"{ds.lower()}_bar_log.png"
            plt.savefig(filename, dpi=150)
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")

        plt.show()


def main():
    csv_path = input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ CSV (–∏–ª–∏ Enter –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞): ").strip() or None
    df = load_data(csv_path)
    save_choice = input("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏ –≤ PNG? (y/n): ").strip().lower().startswith("y")
    plot_benchmarks_bar(df, save=save_choice)


if __name__ == "__main__":
    main()
